初始化一个Git仓库，使用 git init 命令
使用命令 git add <file> 添加一个文件到缓冲区，注意，可以反复多次使用，添加多个文件
使用 git commit -m <message> 将添加到缓冲区的文件提交

要随时掌握工作区的状态，使用 git status 命令
如果 git status 告诉你有文件被修改过，用 git diff 可以查看修改内容

我们使用 git log 命令查看历史记录，显示从最近到最远的提交日志；如果嫌输出信息太多，可以加上 --pretty=oneline
HEAD指向的版本就是当前的版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 git reset --hard commit_id
穿梭前用 git log 查看提交历史，以便确定要回退到哪个版本
要重返未来，用 git reflog 查看命令历史，以便确定要回退到未来的哪个版本

使用 git diff HEAD -- readme.txt 命令可以查看工作区和版本库里面最新版本的区别

当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout -- file
当你不但改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分两部：
  第一步用命令 git reset HEAD <file>
  第二步用命令 git checkout -- file
当你已经提交了不合适的修改到版本库时，想要撤销本次提交，使用 git reset --hard commit_id 前提是没有推送到远程库

命令 git rm 用于删除一个文件，如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容

要关联一个远程库，使用命令 git remote add origin git@server-name:path/repo-name.git
关联后，使用命令 git push -u origin master 第一次推送 master 分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令 git push origin master 推送最新修改

要克隆一个仓库，首先必须知道仓库的地址，然后使用 git clone 命令克隆
Git支持多种协议，包括 https 但通过 ssh 支持的原声git协议速度最快

查看分支： git branch <-v>
创建分支： git branch <name>
切换分支： git checkout <name> 或者 git switch <name>
创建+切换分支： git checkout -b <name> 或者 git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支： git branch -d <name>

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用 git log --graph 命令可以查看到分支合并图，例如： git log --graph --pretty=oneline --abbrev-commit

修复ＢＵＧ时，我们会通过创建新的BUG分支进行修复，然后合并，最后删除
当手头工作没有完成时，先把工作现场　git stash 一下，然后去修复BUG，修复后，再 git stash pop　回到工作现场
在　master 分支修复的 BUG 想要合并到当前dev分支，可以用　git cherry-pick <commit_id>　命令，把bug提交的修改“复制”到当前分支，避免重复劳动
